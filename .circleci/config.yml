version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
    #   # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
jobs:
  # build-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]      
  #     - run:
  #         name: Build front-end
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build

  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]      
  #     - run:
  #         name: Back-end build
  #         command: |
  #            cd backend
  #            npm install
  #            npm run build

  # test-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout 
  #     - restore_cache:
  #         keys: [frontend-build] 
  #     - run:
  #         name: Front-end test
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run test
                
  # test-backend:  
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout 
  #     - restore_cache:
  #         keys: [backend-build]       
  #     - run:
  #         name: Back-end test
  #         command: |
  #           cd backend
  #           npm install
  #           npm run test    

  # scan-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]       
  #     - run:
  #         name: Front-end scan
  #         command: |
  #           cd frontend
  #           npm install
  #           npm audit fix --audit-level=critical --force
  #           npm audit --audit-level=critical

  # scan-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]       
  #     - run:
  #         name: Back-end scan
  #         command: |
  #           cd backend
  #           npm install
  #           npm audit fix --audit-level=critical --force
  #           npm audit fix --force
  #           npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
            fingerprints: ["12:1f:88:42:97:5b:1f:17:e6:26:fb:72:e9:2a:77:12"] 
      - run: apk add tar gzip
      - attach_workspace:
          at: ~/               
      - run: apk add --update ansible 
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml   
      - destroy-environment         

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION      
      - add_ssh_keys:
            fingerprints: ["12:1f:88:42:97:5b:1f:17:e6:26:fb:72:e9:2a:77:12"] 
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/       
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install   
            npm run migrations > migrations_dump.txt         
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            curl https://kvdb.io/MzJ2xvA3RPdiEQJ9scZk3o/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: yum install -y tar gzip      
      - attach_workspace:
          at: ~/      
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y python3
            yum install -y ansible
            yum install -y nodejs
            yum install -y npm            
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress')
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}" 
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
            fingerprints: ["12:1f:88:42:97:5b:1f:17:e6:26:fb:72:e9:2a:77:12"] 
      - run: apk add --update tar gzip
      - attach_workspace:
          at: ~/               
      - run:
          name: Install dependencies
          command: |
            apk add --update python3
            apk add --update ansible
            apk add --update nodejs
            apk add --update npm
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment      

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires:
      #       - build-frontend      
      # - test-backend:
      #     requires:
      #       - build-backend 
      # - scan-frontend:
      #     requires:
      #       - build-frontend
      # - scan-backend:
      #     requires:
      #       - build-backend  
      - deploy-infrastructure 
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires: 
            - configure-infrastructure    
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - deploy-frontend  
